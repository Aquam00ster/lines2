/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lines1;

import java.awt.*;
import javax.swing.*;
import java.awt.image.*;
import org.opencv.core.*;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.Videoio;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.UsbCameraInfo;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.vision.VisionThread;

public class App {
    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    private JFrame frame;
    private JLabel lbl;

    public App() {
        frame = new JFrame();
        frame.setLayout(new FlowLayout());
        frame.setSize(350, 250);
        lbl = new JLabel();
        frame.add(lbl);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public void displayImage(Image img) {
        ImageIcon icon = new ImageIcon(img);
        frame.setSize(img.getWidth(null) + 50, img.getHeight(null) + 50);
        lbl.setIcon(icon);
    }

    public static BufferedImage Mat2BufferedImage(Mat m) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (m.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels() * m.cols() * m.rows();
        byte[] b = new byte[bufferSize];
        m.get(0, 0, b); // get all the pixels
        BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return image;
    }

    static void hackCameraExposure(int dev) {
        if (!new VideoCapture(dev).set(Videoio.CV_CAP_PROP_EXPOSURE, -400)) {
            System.out.println("LifeCam hack did not worked");
        }
    }

    static int findLifeCam() {
        for (UsbCameraInfo i : UsbCamera.enumerateUsbCameras()) {
            if (i.path.contains("vid_045e"))
                return i.dev;
        }
        System.out.println("LifeCam not found");
        return 0;
    }

    static Mat m = null;

    public static void main(String[] args) throws Exception {
        App app = new App();

        int dev = findLifeCam();
        UsbCamera usbCamera = CameraServer.getInstance().startAutomaticCapture(dev);
        hackCameraExposure(dev);
        FindShapesPipeline pipeline = new FindShapesPipeline();
        VisionThread vt = new VisionThread(usbCamera, pipeline, p -> {
            m = p.m;
        });
        vt.start();

        while (true) {
            if (m != null) {
                BufferedImage bi = Mat2BufferedImage(m);
                app.displayImage(bi);
            }
            Thread.sleep(50);
        }
    }
}
